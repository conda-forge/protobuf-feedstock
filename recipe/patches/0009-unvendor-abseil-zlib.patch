From 9a8d9303f92388a94f0bfcf878b8b78c7b8272f7 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Mon, 3 Mar 2025 11:59:27 +1100
Subject: [PATCH 9/9] unvendor abseil/zlib

depends on putting tensorflow infrastructure in place, see feedstock build scripts
---
 WORKSPACE               | 15 +++++++++
 protobuf_deps.bzl       | 20 -----------
 python/BUILD.bazel      |  7 ++++
 third_party/BUILD.bazel |  1 -
 third_party/zlib.BUILD  | 74 -----------------------------------------
 5 files changed, 22 insertions(+), 95 deletions(-)
 delete mode 100644 third_party/zlib.BUILD

diff --git a/WORKSPACE b/WORKSPACE
index 6148f5e67..1ed0a75cf 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -10,6 +10,21 @@ local_repository(
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 
+load("//third_party:repo.bzl", "tf_http_archive", "tf_mirror_urls")
+load("//third_party/systemlibs:syslibs_configure.bzl", "syslibs_configure")
+load("//third_party/absl:workspace.bzl", absl = "repo")
+
+syslibs_configure(name = "local_config_syslibs")
+absl()
+tf_http_archive(
+    name = "zlib",
+    # build_file = "//third_party:zlib.BUILD",
+    sha256 = "9a93b2b7dfdac77ceba5a558a580e74667dd6fede4585b91eefb60f03b72df23",
+    # strip_prefix = "zlib-1.3.1",
+    system_build_file = "//third_party/systemlibs:zlib.BUILD",
+    urls = tf_mirror_urls("https://zlib.net/fossils/zlib-1.3.1.tar.gz"),
+)
+
 # Load common dependencies first to ensure we use the correct version
 load("//:protobuf_deps.bzl", "PROTOBUF_MAVEN_ARTIFACTS", "protobuf_deps")
 
diff --git a/protobuf_deps.bzl b/protobuf_deps.bzl
index a3aed626d..ec74b8b8a 100644
--- a/protobuf_deps.bzl
+++ b/protobuf_deps.bzl
@@ -81,26 +81,6 @@ def protobuf_deps():
             ],
         )
 
-    if not native.existing_rule("abseil-cpp"):
-        _github_archive(
-            name = "abseil-cpp",
-            repo = "https://github.com/abseil/abseil-cpp",
-            commit = "76bb24329e8bf5f39704eb10d21b9a80befa7c81",  # Abseil LTS 20250512.1
-            integrity = "sha256-jF3/tZRlrthY/Y+cEgf1ljqPmtqNOcwVh392LHtERWA=",
-        )
-
-    if not native.existing_rule("zlib"):
-        http_archive(
-            name = "zlib",
-            build_file = Label("//third_party:zlib.BUILD"),
-            sha256 = "38ef96b8dfe510d42707d9c781877914792541133e1870841463bfa73f883e32",
-            strip_prefix = "zlib-1.3.1",
-            urls = [
-                "https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.xz",
-                "https://zlib.net/zlib-1.3.1.tar.xz",
-            ],
-        )
-
     if not native.existing_rule("jsoncpp"):
         _github_archive(
             name = "jsoncpp",
diff --git a/python/BUILD.bazel b/python/BUILD.bazel
index e1b74d3a9..07aefd4d2 100644
--- a/python/BUILD.bazel
+++ b/python/BUILD.bazel
@@ -20,6 +20,13 @@ package(
     default_visibility = ["//python/dist:__pkg__"],
 )
 
+# some other targets expect to find this here
+cc_library(
+    name = "zlib",
+    deps = ["@zlib//:zlib"],
+    visibility = ["//visibility:public"],
+)
+
 LIMITED_API_FLAG_SELECT = {
     ":limited_api_3.9": ["-DPy_LIMITED_API=0x03090000"],
     ":limited_api_3.10": ["-DPy_LIMITED_API=0x030a0000"],
diff --git a/third_party/BUILD.bazel b/third_party/BUILD.bazel
index f70d91de5..491a5c5c7 100644
--- a/third_party/BUILD.bazel
+++ b/third_party/BUILD.bazel
@@ -2,5 +2,4 @@ exports_files([
     "BUILD.bazel",
     "jsoncpp.BUILD",
     "rules_fuzzing.patch",
-    "zlib.BUILD",
 ])
diff --git a/third_party/zlib.BUILD b/third_party/zlib.BUILD
deleted file mode 100644
index 85a97c5d6..000000000
--- a/third_party/zlib.BUILD
+++ /dev/null
@@ -1,74 +0,0 @@
-load("@rules_cc//cc:defs.bzl", "cc_library")
-
-licenses(["notice"])  # BSD/MIT-like license (for zlib)
-
-exports_files(["zlib.BUILD"])
-
-_ZLIB_HEADERS = [
-    "crc32.h",
-    "deflate.h",
-    "gzguts.h",
-    "inffast.h",
-    "inffixed.h",
-    "inflate.h",
-    "inftrees.h",
-    "trees.h",
-    "zconf.h",
-    "zlib.h",
-    "zutil.h",
-]
-
-_ZLIB_PREFIXED_HEADERS = ["zlib/include/" + hdr for hdr in _ZLIB_HEADERS]
-
-# In order to limit the damage from the `includes` propagation
-# via `:zlib`, copy the public headers to a subdirectory and
-# expose those.
-genrule(
-    name = "copy_public_headers",
-    srcs = _ZLIB_HEADERS,
-    outs = _ZLIB_PREFIXED_HEADERS,
-    cmd_bash = "cp $(SRCS) $(@D)/zlib/include/",
-    cmd_bat = " && ".join(
-        ["@copy /Y $(location %s) $(@D)\\zlib\\include\\  >NUL" %
-         s for s in _ZLIB_HEADERS],
-    ),
-)
-
-cc_library(
-    name = "zlib",
-    srcs = [
-        "adler32.c",
-        "compress.c",
-        "crc32.c",
-        "deflate.c",
-        "gzclose.c",
-        "gzlib.c",
-        "gzread.c",
-        "gzwrite.c",
-        "infback.c",
-        "inffast.c",
-        "inflate.c",
-        "inftrees.c",
-        "trees.c",
-        "uncompr.c",
-        "zutil.c",
-        # Include the un-prefixed headers in srcs to work
-        # around the fact that zlib isn't consistent in its
-        # choice of <> or "" delimiter when including itself.
-    ] + _ZLIB_HEADERS,
-    hdrs = _ZLIB_PREFIXED_HEADERS,
-    copts = select({
-        "@platforms//os:windows": [],
-        "@platforms//os:macos": [
-            "-Wno-unused-variable",
-            "-Wno-implicit-function-declaration",
-        ],
-        "//conditions:default": [
-            "-Wno-deprecated-non-prototype",
-            "-Wno-unused-variable",
-            "-Wno-implicit-function-declaration",
-        ],
-    }),
-    includes = ["zlib/include/"],
-    visibility = ["//visibility:public"],
-)
